use rgbunit::reg;

pub struct Mmio {
	p1: u8,
	sb: u8,
	sc: u8,
	div: u8,
	tma: u8,
	tac: u8,
	_if: u8,
	// Sound registers
	nr10: u8,
	nr11: u8,
	nr12: u8,
	nr13: u8,
	nr14: u8,
	nr21: u8,
	nr22: u8,
	nr23: u8,
	nr24: u8,
	nr30: u8,
	nr31: u8,
	nr32: u8,
	nr33: u8,
	nr34: u8,
	nr41: u8,
	nr42: u8,
	nr43: u8,
	nr44: u8,
	nr50: u8,
	nr51: u8,
	nr52: u8,
	lcdc: u8,
	stat: u8,
	scy: u8,
	scx: u8,
	ly: u8,
	lyc: u8,
	dma: u8,
	bgp: u8,
	obp0: u8,
	obp1: u8,
	wy: u8,
	wx: u8,
	key1: u8,
	vbk: u8,
	hdma1: u8,
	hdma2: u8,
	hdma3: u8,
	hdma4: u8,
	hdma5: u8,
	rp: u8,
	bcps: u8,
	bcpd: u8,
	ocps: u8,
	ocpd: u8,
	svbk: u8,
	pcm12: u8,
	pcm34: u8,
	ie: u8,
}

impl Mmio {
	pub fn read(index: u8) -> u8 {
		match index {
			reg::P1 => {
				// TODO: Allow the user to define a set of pressed buttons to loosely implement rP1.
				eprintln!("Unit test has no joypad input");
				p1
			},
			reg::SB => {
				// TODO: Allow the user to define a stream of bytes to read through rSB.
				eprintln!("Unit test has no serial input");
				sb
			},
			reg::SC => { sc },
			reg::DIV => { div },
			reg::TMA => { tma },
			reg::TAC => { tac },
			reg::IF => { _if },
			reg::NR10 => { nr10 },
			reg::NR11 => { nr11 },
			reg::NR12 => { nr12 },
			reg::NR13 => { nr13 },
			reg::NR14 => { nr14 },
			reg::NR21 => { nr21 },
			reg::NR22 => { nr22 },
			reg::NR23 => { nr23 },
			reg::NR24 => { nr24 },
			reg::NR30 => { nr30 },
			reg::NR31 => { nr31 },
			reg::NR32 => { nr32 },
			reg::NR33 => { nr33 },
			reg::NR34 => { nr34 },
			reg::NR41 => { nr41 },
			reg::NR42 => { nr42 },
			reg::NR43 => { nr43 },
			reg::NR44 => { nr44 },
			reg::NR50 => { nr50 },
			reg::NR51 => { nr51 },
			reg::NR52 => { nr52 },
			reg::LCDC => { lcdc },
			reg::STAT => { stat },
			reg::SCY => { scy },
			reg::SCX => { scx },
			reg::LY => { ly },
			reg::LYC => { lyc },
			reg::DMA => { dma },
			reg::BGP => { bgp },
			reg::OBP0 => { obp0 },
			reg::OBP1 => { obp1 },
			reg::WY => { wy },
			reg::WX => { wx },
			reg::KEY1 => { key1 },
			reg::VBK => { vbk },
			reg::HDMA1 => { hdma1 },
			reg::HDMA2 => { hdma2 },
			reg::HDMA3 => { hdma3 },
			reg::HDMA4 => { hdma4 },
			reg::HDMA5 => { hdma5 },
			reg::RP => { rp },
			reg::BCPS => { bcps },
			reg::BCPD => { bcpd },
			reg::OCPS => { ocps },
			reg::OCPD => { ocpd },
			reg::SVBK => { svbk },
			reg::PCM12 => { pcm12 },
			reg::PCM34 => { pcm34 },
			reg::IE => { ie },
		}
	}

	pub fn write(index: u8, value: u8) {
		match index {
			reg::P1 => { p1 = value; },
			reg::SB => { sb = value; },
			reg::SC => { sc = value; },
			reg::DIV => { div = value; },
			reg::TMA => { tma = value; },
			reg::TAC => { tac = value; },
			reg::IF => { _if = value; },
			reg::NR10 => { nr10 = value; },
			reg::NR11 => { nr11 = value; },
			reg::NR12 => { nr12 = value; },
			reg::NR13 => { nr13 = value; },
			reg::NR14 => { nr14 = value; },
			reg::NR21 => { nr21 = value; },
			reg::NR22 => { nr22 = value; },
			reg::NR23 => { nr23 = value; },
			reg::NR24 => { nr24 = value; },
			reg::NR30 => { nr30 = value; },
			reg::NR31 => { nr31 = value; },
			reg::NR32 => { nr32 = value; },
			reg::NR33 => { nr33 = value; },
			reg::NR34 => { nr34 = value; },
			reg::NR41 => { nr41 = value; },
			reg::NR42 => { nr42 = value; },
			reg::NR43 => { nr43 = value; },
			reg::NR44 => { nr44 = value; },
			reg::NR50 => { nr50 = value; },
			reg::NR51 => { nr51 = value; },
			reg::NR52 => { nr52 = value; },
			reg::LCDC => { lcdc = value; },
			reg::STAT => { stat = value; },
			reg::SCY => { scy = value; },
			reg::SCX => { scx = value; },
			reg::LY => { ly = value; },
			reg::LYC => { lyc = value; },
			reg::DMA => { dma = value; },
			reg::BGP => { bgp = value; },
			reg::OBP0 => { obp0 = value; },
			reg::OBP1 => { obp1 = value; },
			reg::WY => { wy = value; },
			reg::WX => { wx = value; },
			reg::KEY1 => { key1 = value; },
			reg::VBK => { vbk = value; },
			reg::HDMA1 => { hdma1 = value; },
			reg::HDMA2 => { hdma2 = value; },
			reg::HDMA3 => { hdma3 = value; },
			reg::HDMA4 => { hdma4 = value; },
			reg::HDMA5 => { hdma5 = value; },
			reg::RP => { rp = value; },
			reg::BCPS => { bcps = value; },
			reg::BCPD => { bcpd = value; },
			reg::OCPS => { ocps = value; },
			reg::OCPD => { ocpd = value; },
			reg::SVBK => { svbk = value; },
			reg::PCM12 => { pcm12 = value; },
			reg::PCM34 => { pcm34 = value; },
			reg::IE => { ie = value; },
		}
	}

	pub fn new() {
		Mmio {
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		}
	}
}